package mock

import (
	"context"
	"master-service/internal/modules/book/domain"

	"github.com/mrapry/go-lib/golibshared"
	"github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the MemberRepository type
type BookRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx, filter
func (_m *BookRepository) FindAll(ctx context.Context, filter *domain.Filter) <-chan golibshared.Result {
	ret := _m.Called(ctx, filter)

	var r0 <-chan golibshared.Result
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Filter) <-chan golibshared.Result); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan golibshared.Result)
		}
	}

	return r0
}

// Find provides a mock function with given fields: ctx, obj
func (_m *BookRepository) Find(ctx context.Context, obj domain.Book) <-chan golibshared.Result {
	ret := _m.Called(ctx, obj)

	var r0 <-chan golibshared.Result
	if rf, ok := ret.Get(0).(func(context.Context, domain.Book) <-chan golibshared.Result); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan golibshared.Result)
		}
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *BookRepository) FindByID(ctx context.Context, ID string) <-chan golibshared.Result {
	ret := _m.Called(ctx, ID)

	var r0 <-chan golibshared.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan golibshared.Result); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan golibshared.Result)
		}
	}

	return r0
}

// Count provides a mock function with given fields: ctx, filter
func (_m *BookRepository) Count(ctx context.Context, filter *domain.Filter) <-chan golibshared.Result {
	ret := _m.Called(ctx, filter)

	var r0 <-chan golibshared.Result
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Filter) <-chan golibshared.Result); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan golibshared.Result)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, newData
func (_m *BookRepository) Insert(ctx context.Context, newData *domain.Book) <-chan golibshared.Result {
	ret := _m.Called(ctx, newData)

	var r0 <-chan golibshared.Result
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Book) <-chan golibshared.Result); ok {
		r0 = rf(ctx, newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan golibshared.Result)
		}
	}

	return r0
}

// Save provides a mock function with given fields: ctx, data
func (_m *BookRepository) Save(ctx context.Context, data *domain.Book) <-chan golibshared.Result {
	ret := _m.Called(ctx, data)

	var r0 <-chan golibshared.Result
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Book) <-chan golibshared.Result); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan golibshared.Result)
		}
	}

	return r0
}
