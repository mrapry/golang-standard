package mock

import (
	"context"
	"master-service/internal/modules/book/domain"

	"github.com/mrapry/go-lib/golibshared"
	"github.com/stretchr/testify/mock"
)

// BookUsecase is an autogenerated mock type for the MemberUsecase type
type BookUsecase struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx, filter
func (_m *BookUsecase) FindAll(ctx context.Context, filter *domain.Filter) ([]*domain.Book, *golibshared.Meta, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*domain.Book
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Filter) []*domain.Book); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Book)
		}
	}

	var r1 *golibshared.Meta
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Filter) *golibshared.Meta); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*golibshared.Meta)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *domain.Filter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: ctx, data
func (_m *BookUsecase) FindByID(ctx context.Context, ID string) (*domain.Book, error) {
	ret := _m.Called(ctx, ID)

	var r0 *domain.Book
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Book); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, data
func (_m *BookUsecase) Create(ctx context.Context, data *domain.Book) (*domain.Book, error) {
	ret := _m.Called(ctx, data)

	var r0 *domain.Book
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Book) *domain.Book); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Book) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, data, ID
func (_m *BookUsecase) Update(ctx context.Context, data *domain.Book, ID string) (*domain.Book, error) {
	ret := _m.Called(ctx, data, ID)

	var r0 *domain.Book
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Book, string) *domain.Book); ok {
		r0 = rf(ctx, data, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Book, string) error); ok {
		r1 = rf(ctx, data, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveByID provides a mock function with given fields: ctx, data, ID
func (_m *BookUsecase) RemoveByID(ctx context.Context, ID string) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(1)
	}

	return r0
}

// RestoreByID provides a mock function with given fields: ctx, data, ID
func (_m *BookUsecase) RestoreByID(ctx context.Context, ID string) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(1)
	}

	return r0
}
