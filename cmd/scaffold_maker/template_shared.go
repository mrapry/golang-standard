package main

//ResponseSharedTemplate template reposonse shared
const ResponseSharedTemplate = `package shared

import "time"

const (
	// CHARS for setting short random string
	CHARS = "abcdefghijklmnopqrstuvwxyz0123456789"
	// ErrorDataNotFound error message when data doesn't exist
	ErrorDataNotFound = "Data %s tidak ditemukan"
	// ErrorDataAlreadyExist error message when data already exist
	ErrorDataAlreadyExist = "Data %s sudah terdaftar"
	// ErrorParameterInvalid error message for parameter is invalid
	ErrorParameterInvalid = "Parameter %s tidak valid"
	// ErrorParameterRequired error message for parameter is missing
	ErrorParameterRequired = "Parameter %s dibutuhkan"
	// ErrorParameterDuplicate error message for parameter is duplicate
	ErrorParameterDuplicate = "Parameter %s duplikat"
	// ErrorHeader error message for header is missing
	ErrorHeader = "Header %s dibutuhkan"
	// ErrorParameterLength error message for parameter length is invalid
	ErrorParameterLength = "Panjang parameter %s melebihi batas %d"
	// ErrorUnauthorized error message for unauthorized user
	ErrorUnauthorized = "Anda tidak memiliki hak akses"
	// SuccessMessage message for success process
	SuccessMessage = "Berhasil memproses data %s"
	// SuccessSaveEdit message for success process
	SuccessSaveEdit = "Berhasil menyimpan/mengubah data %s"
	// SuccessGetList message for get list
	SuccessGetList = "Berhasil mendapatkan daftar data %s"
	// SuccessGetDetail message for get detail
	SuccessGetDetail = "Berhasil mendapatkan data %s"
	// StatusSuccess message for success status
	StatusSuccess = "OK"
	// ErrorBadRequest message for bad request
	ErrorBadRequest = "bad request"
	// ErrorUnknown message for unknown error
	ErrorUnknown = "Kesalahan tidak diketahui"
	// ErrorParseData message for failed parse data
	ErrorParseData = "Sistem tidak dapat memproses data %s"
	// ErrorDataNotActived message for data not active
	ErrorDataNotActived = "Data %s tidak aktif"
	// ErrorDataIsActived message for data not active
	ErrorDataIsActived = "Data %s dalam keadaan aktif"
	// ErrorMessage message for failed process
	ErrorMessage = "Gagal memproses data %s"
	// DateFormat date formatting
	DateFormat = "2006-01-02T15:04:05Z"
)

var (
	// IndonesianMonth mapping system month to indonesian month
	IndonesianMonth = map[string]string{
		time.January.String():   "Januari",
		time.February.String():  "Februari",
		time.March.String():     "Maret",
		time.April.String():     "April",
		time.May.String():       "Mei",
		time.June.String():      "Juni",
		time.July.String():      "Juli",
		time.August.String():    "Agustus",
		time.September.String(): "September",
		time.October.String():   "Oktober",
		time.November.String():  "November",
		time.December.String():  "Desember",
	}
)
`

//MockSharedTemplate template mock shared
const MockSharedTemplate = `package shared

import (
	"encoding/json"
	"fmt"

	"{{$.LibraryAddress}}/golibshared"
)

//CreateHttpRequestBodyMock create http body mock
func CreateHttpRequestBodyMock(structure interface{}) string {
	json, _ := json.Marshal(structure)
	result := string(json)

	return result
}

//SetMockerySharedResult set shared result mock
func SetMockerySharedResult(result interface{}) <-chan golibshared.Result {
	sharedResult := result.(golibshared.Result)

	// simulasiin untuk set channel shared result
	resultShared := func() <-chan golibshared.Result {
		output := make(chan golibshared.Result)
		go func() { output <- sharedResult }()
		return output
	}()

	return resultShared
}

//SetTestcaseName set testcase name to prevent tech debt
func SetTestcaseName(number int, description string) string {
	return fmt.Sprintf("Testcase #%v : %s", number, description)
}
`

//MockTestTemplate template mock test shared
const MockTestTemplate = `package shared

import (
	"testing"

	"github.com/brianvoe/gofakeit"
	"{{$.LibraryAddress}}/golibshared"
	"github.com/stretchr/testify/assert"
)

func TestCreateHttpRequestBodyMock(t *testing.T) {
	type Test struct {
		Test string {{$.Petik}}json:"test"{{$.Petik}}
	}

	test := Test{}
	result := CreateHttpRequestBodyMock(test)

	assert.NotNil(t, result)
}

func TestSetMockerySharedResult(t *testing.T) {
	result := SetMockerySharedResult(golibshared.Result{Data: gofakeit.Word()})

	assert.NotNil(t, result)
}

func TestSetTestcaseName(t *testing.T) {
	name := SetTestcaseName(1, "positive set test case name")

	assert.Equal(t, SetTestcaseName(1, "positive set test case name"), name)
}
`

//MockStorageTemplate template mock storage template
const MockStorageTemplate = `package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Get provides a mock function with given fields: context, key
func (_m *Storage) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeys provides a mock function with given fields: context, pattern
func (_m *Storage) GetKeys(ctx context.Context, pattern string) ([]string, error) {
	ret := _m.Called(ctx, pattern)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pattern)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, key, value, expire
func (_m *Storage) Set(ctx context.Context, key string, value interface{}, expire time.Duration) error {
	ret := _m.Called(ctx, key, value, expire)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, value, expire)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Error(1)
		}
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, key
func (_m *Storage) Exists(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r1 = ret.Error(1)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, key
func (_m *Storage) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Error(1)
		}
	}

	return r0
}
`

//MockValidatorTemplate template mock validator template
const MockValidatorTemplate = `// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Validator is an autogenerated mock type for the Validator type
type Validator struct {
	mock.Mock
}

// ValidateDocument provides a mock function with given fields: reference, document
func (_m *Validator) ValidateDocument(reference string, document []byte) error {
	ret := _m.Called(reference, document)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(reference, document)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateStruct provides a mock function with given fields: data
func (_m *Validator) ValidateStruct(data interface{}) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
`
